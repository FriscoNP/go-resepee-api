// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entity "go-resepee-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// RecipeRepositoryInterface is an autogenerated mock type for the RecipeRepositoryInterface type
type RecipeRepositoryInterface struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: id
func (_m *RecipeRepositoryInterface) FindByID(id int) (entity.Recipe, error) {
	ret := _m.Called(id)

	var r0 entity.Recipe
	if rf, ok := ret.Get(0).(func(int) entity.Recipe); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Recipe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *RecipeRepositoryInterface) GetAll() ([]entity.Recipe, error) {
	ret := _m.Called()

	var r0 []entity.Recipe
	if rf, ok := ret.Get(0).(func() []entity.Recipe); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Recipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: recipe
func (_m *RecipeRepositoryInterface) Store(recipe *entity.Recipe) (entity.Recipe, error) {
	ret := _m.Called(recipe)

	var r0 entity.Recipe
	if rf, ok := ret.Get(0).(func(*entity.Recipe) entity.Recipe); ok {
		r0 = rf(recipe)
	} else {
		r0 = ret.Get(0).(entity.Recipe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Recipe) error); ok {
		r1 = rf(recipe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAverageRating provides a mock function with given fields: recipeID, averageRating
func (_m *RecipeRepositoryInterface) UpdateAverageRating(recipeID int, averageRating float64) error {
	ret := _m.Called(recipeID, averageRating)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, float64) error); ok {
		r0 = rf(recipeID, averageRating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
