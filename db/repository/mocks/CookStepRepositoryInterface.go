// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entity "go-resepee-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// CookStepRepositoryInterface is an autogenerated mock type for the CookStepRepositoryInterface type
type CookStepRepositoryInterface struct {
	mock.Mock
}

// FindByRecipeID provides a mock function with given fields: recipeID
func (_m *CookStepRepositoryInterface) FindByRecipeID(recipeID int) ([]entity.CookStep, error) {
	ret := _m.Called(recipeID)

	var r0 []entity.CookStep
	if rf, ok := ret.Get(0).(func(int) []entity.CookStep); ok {
		r0 = rf(recipeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CookStep)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(recipeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: cookStep
func (_m *CookStepRepositoryInterface) Store(cookStep *entity.CookStep) (entity.CookStep, error) {
	ret := _m.Called(cookStep)

	var r0 entity.CookStep
	if rf, ok := ret.Get(0).(func(*entity.CookStep) entity.CookStep); ok {
		r0 = rf(cookStep)
	} else {
		r0 = ret.Get(0).(entity.CookStep)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.CookStep) error); ok {
		r1 = rf(cookStep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
